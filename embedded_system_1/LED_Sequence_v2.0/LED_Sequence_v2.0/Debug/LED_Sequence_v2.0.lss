
LED_Sequence_v2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000064c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  000006c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ea  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ec  00000000  00000000  00001b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be5  00000000  00000000  0000252a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00003110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064e  00000000  00000000  000033b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000adc  00000000  00000000  00003a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000044de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_1>
   8:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_2>
   c:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ab 36       	cpi	r26, 0x6B	; 107
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  74:	0c 94 24 03 	jmp	0x648	; 0x648 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <interrupt_func>:
}


void interrupt_func(void)
{   
	if(state==state_8)
  7c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
  80:	88 30       	cpi	r24, 0x08	; 8
  82:	21 f4       	brne	.+8      	; 0x8c <interrupt_func+0x10>
	{
		state=1;
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <state>
  8a:	08 95       	ret
	}
	else
	{
		state++;
  8c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
  90:	8f 5f       	subi	r24, 0xFF	; 255
  92:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <state>
  96:	08 95       	ret

00000098 <APP_INIT>:
 */ 
#include "APP.h"
static volatile uint8_t state=0;
static ST_EXT_INT_HANDLER_t handler;
STD_return APP_INIT(void)
{    STD_return ret_val=ok;
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	28 97       	sbiw	r28, 0x08	; 8
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
	LED LED1={porta,led1};
  ae:	19 82       	std	Y+1, r1	; 0x01
  b0:	1a 82       	std	Y+2, r1	; 0x02
    LED LED2={porta,led2};
  b2:	1b 82       	std	Y+3, r1	; 0x03
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	8c 83       	std	Y+4, r24	; 0x04
    LED LED3={porta,led3};
  b8:	1d 82       	std	Y+5, r1	; 0x05
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	8e 83       	std	Y+6, r24	; 0x06
    LED LED4={porta,led4};
  be:	1f 82       	std	Y+7, r1	; 0x07
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	88 87       	std	Y+8, r24	; 0x08
	ret_val |=LED_INIT(&LED1);
  c4:	ce 01       	movw	r24, r28
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	0e 94 06 01 	call	0x20c	; 0x20c <LED_INIT>
  cc:	18 2f       	mov	r17, r24
	ret_val |=LED_INIT(&LED2);
  ce:	ce 01       	movw	r24, r28
  d0:	03 96       	adiw	r24, 0x03	; 3
  d2:	0e 94 06 01 	call	0x20c	; 0x20c <LED_INIT>
  d6:	18 2b       	or	r17, r24
	ret_val |=LED_INIT(&LED3);
  d8:	ce 01       	movw	r24, r28
  da:	05 96       	adiw	r24, 0x05	; 5
  dc:	0e 94 06 01 	call	0x20c	; 0x20c <LED_INIT>
  e0:	18 2b       	or	r17, r24
	ret_val |=LED_INIT(&LED4);
  e2:	ce 01       	movw	r24, r28
  e4:	07 96       	adiw	r24, 0x07	; 7
  e6:	0e 94 06 01 	call	0x20c	; 0x20c <LED_INIT>
  ea:	18 2b       	or	r17, r24
	handler.ext_int=int0;
  ec:	e0 e6       	ldi	r30, 0x60	; 96
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	10 82       	st	Z, r1
	handler.edge_select=rising;
  f2:	11 82       	std	Z+1, r1	; 0x01
	handler.function_ptr=interrupt_func;
  f4:	8e e3       	ldi	r24, 0x3E	; 62
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	93 83       	std	Z+3, r25	; 0x03
  fa:	82 83       	std	Z+2, r24	; 0x02
	ret_val |=EXT_INT_HANDLER(&handler);
  fc:	cf 01       	movw	r24, r30
  fe:	0e 94 d5 00 	call	0x1aa	; 0x1aa <EXT_INT_HANDLER>
 102:	81 2b       	or	r24, r17
	sei();
 104:	78 94       	sei
	return ret_val;
}
 106:	28 96       	adiw	r28, 0x08	; 8
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	08 95       	ret

0000011a <APP_START>:
void APP_START(void)
{
	if(state==state_1)
 11a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	29 f4       	brne	.+10     	; 0x12c <APP_START+0x12>
	{
		LED_ON(porta,led1);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 12 01 	call	0x224	; 0x224 <LED_ON>
 12a:	08 95       	ret
	}
	else if(state==state_2)
 12c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	29 f4       	brne	.+10     	; 0x13e <APP_START+0x24>
	{
		LED_ON(porta,led2);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 12 01 	call	0x224	; 0x224 <LED_ON>
 13c:	08 95       	ret
	}
	else if(state==state_3)
 13e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	29 f4       	brne	.+10     	; 0x150 <APP_START+0x36>
	{
		LED_ON(porta,led3);
 146:	62 e0       	ldi	r22, 0x02	; 2
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 12 01 	call	0x224	; 0x224 <LED_ON>
 14e:	08 95       	ret
	}
	else if(state==state_4)
 150:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	29 f4       	brne	.+10     	; 0x162 <APP_START+0x48>
	{
		LED_ON(porta,led4);
 158:	63 e0       	ldi	r22, 0x03	; 3
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 12 01 	call	0x224	; 0x224 <LED_ON>
 160:	08 95       	ret
	}
	else if(state==state_5)
 162:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
 166:	85 30       	cpi	r24, 0x05	; 5
 168:	29 f4       	brne	.+10     	; 0x174 <APP_START+0x5a>
	{
		LED_OFF(porta,led1);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 17 01 	call	0x22e	; 0x22e <LED_OFF>
 172:	08 95       	ret
	}
	else if(state==state_6)
 174:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
 178:	86 30       	cpi	r24, 0x06	; 6
 17a:	29 f4       	brne	.+10     	; 0x186 <APP_START+0x6c>
	{
		LED_OFF(porta,led2);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 17 01 	call	0x22e	; 0x22e <LED_OFF>
 184:	08 95       	ret
	}
	else if(state==state_7)
 186:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
 18a:	87 30       	cpi	r24, 0x07	; 7
 18c:	29 f4       	brne	.+10     	; 0x198 <APP_START+0x7e>
	{
		LED_OFF(porta,led3);
 18e:	62 e0       	ldi	r22, 0x02	; 2
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 17 01 	call	0x22e	; 0x22e <LED_OFF>
 196:	08 95       	ret
	}
	else if(state==state_8)
 198:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
 19c:	88 30       	cpi	r24, 0x08	; 8
 19e:	21 f4       	brne	.+8      	; 0x1a8 <APP_START+0x8e>
	{
		LED_OFF(porta,led4);
 1a0:	63 e0       	ldi	r22, 0x03	; 3
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 17 01 	call	0x22e	; 0x22e <LED_OFF>
 1a8:	08 95       	ret

000001aa <EXT_INT_HANDLER>:
 * Created: 4/7/2023 9:27:15 PM
 *  Author: basel
 */ 
#include"EXTERNAL_INT_MANAGER.h"
STD_return EXT_INT_HANDLER(ST_EXT_INT_HANDLER_t* handler)
{  STD_return ret_val=ok;
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
	  if(handler==NULL)
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	39 f1       	breq	.+78     	; 0x200 <EXT_INT_HANDLER+0x56>
 1b2:	ec 01       	movw	r28, r24
	  {
		  ret_val = not_ok;
	  }
	  else
	  {
		  		 EDGE_SELECET(handler->edge_select,handler->ext_int);
 1b4:	68 81       	ld	r22, Y
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	0e 94 36 02 	call	0x46c	; 0x46c <EDGE_SELECET>
				  switch(handler->ext_int)
 1bc:	88 81       	ld	r24, Y
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	69 f0       	breq	.+26     	; 0x1dc <EXT_INT_HANDLER+0x32>
 1c2:	18 f0       	brcs	.+6      	; 0x1ca <EXT_INT_HANDLER+0x20>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	99 f0       	breq	.+38     	; 0x1ee <EXT_INT_HANDLER+0x44>
 1c8:	1d c0       	rjmp	.+58     	; 0x204 <EXT_INT_HANDLER+0x5a>
				  {
				  case int0:SETCALLBACK_FUN_INT0(handler->function_ptr);EXT_INTERRUPT_ENABLE (handler->ext_int);break;
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	9b 81       	ldd	r25, Y+3	; 0x03
 1ce:	0e 94 91 02 	call	0x522	; 0x522 <SETCALLBACK_FUN_INT0>
 1d2:	88 81       	ld	r24, Y
 1d4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <EXT_INTERRUPT_ENABLE>
 * Created: 4/7/2023 9:27:15 PM
 *  Author: basel
 */ 
#include"EXTERNAL_INT_MANAGER.h"
STD_return EXT_INT_HANDLER(ST_EXT_INT_HANDLER_t* handler)
{  STD_return ret_val=ok;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
	  else
	  {
		  		 EDGE_SELECET(handler->edge_select,handler->ext_int);
				  switch(handler->ext_int)
				  {
				  case int0:SETCALLBACK_FUN_INT0(handler->function_ptr);EXT_INTERRUPT_ENABLE (handler->ext_int);break;
 1da:	15 c0       	rjmp	.+42     	; 0x206 <EXT_INT_HANDLER+0x5c>
				  case int1:SETCALLBACK_FUN_INT1(handler->function_ptr);EXT_INTERRUPT_ENABLE ( handler->ext_int);break;
 1dc:	8a 81       	ldd	r24, Y+2	; 0x02
 1de:	9b 81       	ldd	r25, Y+3	; 0x03
 1e0:	0e 94 9b 02 	call	0x536	; 0x536 <SETCALLBACK_FUN_INT1>
 1e4:	88 81       	ld	r24, Y
 1e6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <EXT_INTERRUPT_ENABLE>
 * Created: 4/7/2023 9:27:15 PM
 *  Author: basel
 */ 
#include"EXTERNAL_INT_MANAGER.h"
STD_return EXT_INT_HANDLER(ST_EXT_INT_HANDLER_t* handler)
{  STD_return ret_val=ok;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
	  {
		  		 EDGE_SELECET(handler->edge_select,handler->ext_int);
				  switch(handler->ext_int)
				  {
				  case int0:SETCALLBACK_FUN_INT0(handler->function_ptr);EXT_INTERRUPT_ENABLE (handler->ext_int);break;
				  case int1:SETCALLBACK_FUN_INT1(handler->function_ptr);EXT_INTERRUPT_ENABLE ( handler->ext_int);break;
 1ec:	0c c0       	rjmp	.+24     	; 0x206 <EXT_INT_HANDLER+0x5c>
				  case int2:SETCALLBACK_FUN_INT2(handler->function_ptr);EXT_INTERRUPT_ENABLE ( handler->ext_int);break;
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	9b 81       	ldd	r25, Y+3	; 0x03
 1f2:	0e 94 a5 02 	call	0x54a	; 0x54a <SETCALLBACK_FUN_INT2>
 1f6:	88 81       	ld	r24, Y
 1f8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <EXT_INTERRUPT_ENABLE>
 * Created: 4/7/2023 9:27:15 PM
 *  Author: basel
 */ 
#include"EXTERNAL_INT_MANAGER.h"
STD_return EXT_INT_HANDLER(ST_EXT_INT_HANDLER_t* handler)
{  STD_return ret_val=ok;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
		  		 EDGE_SELECET(handler->edge_select,handler->ext_int);
				  switch(handler->ext_int)
				  {
				  case int0:SETCALLBACK_FUN_INT0(handler->function_ptr);EXT_INTERRUPT_ENABLE (handler->ext_int);break;
				  case int1:SETCALLBACK_FUN_INT1(handler->function_ptr);EXT_INTERRUPT_ENABLE ( handler->ext_int);break;
				  case int2:SETCALLBACK_FUN_INT2(handler->function_ptr);EXT_INTERRUPT_ENABLE ( handler->ext_int);break;
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <EXT_INT_HANDLER+0x5c>
#include"EXTERNAL_INT_MANAGER.h"
STD_return EXT_INT_HANDLER(ST_EXT_INT_HANDLER_t* handler)
{  STD_return ret_val=ok;
	  if(handler==NULL)
	  {
		  ret_val = not_ok;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	01 c0       	rjmp	.+2      	; 0x206 <EXT_INT_HANDLER+0x5c>
				  switch(handler->ext_int)
				  {
				  case int0:SETCALLBACK_FUN_INT0(handler->function_ptr);EXT_INTERRUPT_ENABLE (handler->ext_int);break;
				  case int1:SETCALLBACK_FUN_INT1(handler->function_ptr);EXT_INTERRUPT_ENABLE ( handler->ext_int);break;
				  case int2:SETCALLBACK_FUN_INT2(handler->function_ptr);EXT_INTERRUPT_ENABLE ( handler->ext_int);break;
				  default:ret_val=not_ok;break;
 204:	81 e0       	ldi	r24, 0x01	; 1
	  }
		 return ret_val;
		
		
	
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <LED_INIT>:
/* functions implementations                                            */
/************************************************************************/
STD_return LED_INIT (LED* led)
{
	STD_return ret_val=ok;
	if(led==NULL)
 20c:	00 97       	sbiw	r24, 0x00	; 0
 20e:	41 f0       	breq	.+16     	; 0x220 <LED_INIT+0x14>
 210:	fc 01       	movw	r30, r24
	{
		ret_val=not_ok;
	}
	else
	{
		DIO_INIT(led->port,led->pin,OUTPUT);
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	61 81       	ldd	r22, Z+1	; 0x01
 216:	80 81       	ld	r24, Z
 218:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_INIT>
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return LED_INIT (LED* led)
{
	STD_return ret_val=ok;
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	08 95       	ret
	if(led==NULL)
	{
		ret_val=not_ok;
 220:	81 e0       	ldi	r24, 0x01	; 1
	{
		DIO_INIT(led->port,led->pin,OUTPUT);
	}
	
	return ret_val;
}
 222:	08 95       	ret

00000224 <LED_ON>:
STD_return LED_ON (DIO_PORTS port, DIO_PINS pin)
{
	STD_return ret_val=ok;
	DIO_WRITE_PIN(port,pin,HIGH);
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_WRITE_PIN>
	return ret_val;
}
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret

0000022e <LED_OFF>:
STD_return LED_OFF (DIO_PORTS port,DIO_PINS pin)
{
	STD_return ret_val=ok;
	DIO_WRITE_PIN(port,pin,LOW);
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_WRITE_PIN>
	return ret_val;
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret

00000238 <main>:
#include "APPLICATION/app.h"


int main(void)
{   
   if(APP_INIT()==ok)
 238:	0e 94 4c 00 	call	0x98	; 0x98 <APP_INIT>
 23c:	81 11       	cpse	r24, r1
 23e:	03 c0       	rjmp	.+6      	; 0x246 <main+0xe>
   {
	   while (1)
	   {
		   APP_START();	   
 240:	0e 94 8d 00 	call	0x11a	; 0x11a <APP_START>
 244:	fd cf       	rjmp	.-6      	; 0x240 <main+0x8>
   }
   else
   {
	   //close the program
   }
}
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	08 95       	ret

0000024c <DIO_INIT>:
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	29 f1       	breq	.+74     	; 0x29a <DIO_INIT+0x4e>
 250:	38 f0       	brcs	.+14     	; 0x260 <DIO_INIT+0x14>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	09 f4       	brne	.+2      	; 0x258 <DIO_INIT+0xc>
 256:	3e c0       	rjmp	.+124    	; 0x2d4 <DIO_INIT+0x88>
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	09 f4       	brne	.+2      	; 0x25e <DIO_INIT+0x12>
 25c:	58 c0       	rjmp	.+176    	; 0x30e <DIO_INIT+0xc2>
 25e:	74 c0       	rjmp	.+232    	; 0x348 <DIO_INIT+0xfc>
 260:	41 30       	cpi	r20, 0x01	; 1
 262:	61 f4       	brne	.+24     	; 0x27c <DIO_INIT+0x30>
 264:	2a b3       	in	r18, 0x1a	; 26
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_INIT+0x24>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_INIT+0x20>
 274:	82 2b       	or	r24, r18
 276:	8a bb       	out	0x1a, r24	; 26
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	08 95       	ret
 27c:	41 11       	cpse	r20, r1
 27e:	66 c0       	rjmp	.+204    	; 0x34c <DIO_INIT+0x100>
 280:	2a b3       	in	r18, 0x1a	; 26
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_INIT+0x40>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_INIT+0x3c>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	8a bb       	out	0x1a, r24	; 26
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	61 f4       	brne	.+24     	; 0x2b6 <DIO_INIT+0x6a>
 29e:	27 b3       	in	r18, 0x17	; 23
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_INIT+0x5e>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_INIT+0x5a>
 2ae:	82 2b       	or	r24, r18
 2b0:	87 bb       	out	0x17, r24	; 23
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret
 2b6:	41 11       	cpse	r20, r1
 2b8:	4b c0       	rjmp	.+150    	; 0x350 <DIO_INIT+0x104>
 2ba:	27 b3       	in	r18, 0x17	; 23
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_INIT+0x7a>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_INIT+0x76>
 2ca:	80 95       	com	r24
 2cc:	82 23       	and	r24, r18
 2ce:	87 bb       	out	0x17, r24	; 23
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	08 95       	ret
 2d4:	41 30       	cpi	r20, 0x01	; 1
 2d6:	61 f4       	brne	.+24     	; 0x2f0 <DIO_INIT+0xa4>
 2d8:	24 b3       	in	r18, 0x14	; 20
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_INIT+0x98>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_INIT+0x94>
 2e8:	82 2b       	or	r24, r18
 2ea:	84 bb       	out	0x14, r24	; 20
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 95       	ret
 2f0:	41 11       	cpse	r20, r1
 2f2:	30 c0       	rjmp	.+96     	; 0x354 <DIO_INIT+0x108>
 2f4:	24 b3       	in	r18, 0x14	; 20
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_INIT+0xb4>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_INIT+0xb0>
 304:	80 95       	com	r24
 306:	82 23       	and	r24, r18
 308:	84 bb       	out	0x14, r24	; 20
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret
 30e:	41 30       	cpi	r20, 0x01	; 1
 310:	61 f4       	brne	.+24     	; 0x32a <DIO_INIT+0xde>
 312:	21 b3       	in	r18, 0x11	; 17
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_INIT+0xd2>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_INIT+0xce>
 322:	82 2b       	or	r24, r18
 324:	81 bb       	out	0x11, r24	; 17
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 95       	ret
 32a:	41 11       	cpse	r20, r1
 32c:	15 c0       	rjmp	.+42     	; 0x358 <DIO_INIT+0x10c>
 32e:	21 b3       	in	r18, 0x11	; 17
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_INIT+0xee>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_INIT+0xea>
 33e:	80 95       	com	r24
 340:	82 23       	and	r24, r18
 342:	81 bb       	out	0x11, r24	; 17
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	08 95       	ret
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	08 95       	ret
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	08 95       	ret
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	08 95       	ret
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	08 95       	ret

0000035c <DIO_WRITE_PIN>:
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	29 f1       	breq	.+74     	; 0x3aa <DIO_WRITE_PIN+0x4e>
 360:	38 f0       	brcs	.+14     	; 0x370 <DIO_WRITE_PIN+0x14>
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	09 f4       	brne	.+2      	; 0x368 <DIO_WRITE_PIN+0xc>
 366:	3e c0       	rjmp	.+124    	; 0x3e4 <DIO_WRITE_PIN+0x88>
 368:	83 30       	cpi	r24, 0x03	; 3
 36a:	09 f4       	brne	.+2      	; 0x36e <DIO_WRITE_PIN+0x12>
 36c:	58 c0       	rjmp	.+176    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 36e:	74 c0       	rjmp	.+232    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 370:	41 30       	cpi	r20, 0x01	; 1
 372:	61 f4       	brne	.+24     	; 0x38c <DIO_WRITE_PIN+0x30>
 374:	2b b3       	in	r18, 0x1b	; 27
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_WRITE_PIN+0x24>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_WRITE_PIN+0x20>
 384:	82 2b       	or	r24, r18
 386:	8b bb       	out	0x1b, r24	; 27
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	08 95       	ret
 38c:	41 11       	cpse	r20, r1
 38e:	66 c0       	rjmp	.+204    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 390:	2b b3       	in	r18, 0x1b	; 27
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_WRITE_PIN+0x40>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_WRITE_PIN+0x3c>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	8b bb       	out	0x1b, r24	; 27
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret
 3aa:	41 30       	cpi	r20, 0x01	; 1
 3ac:	61 f4       	brne	.+24     	; 0x3c6 <DIO_WRITE_PIN+0x6a>
 3ae:	28 b3       	in	r18, 0x18	; 24
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_WRITE_PIN+0x5e>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_WRITE_PIN+0x5a>
 3be:	82 2b       	or	r24, r18
 3c0:	88 bb       	out	0x18, r24	; 24
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	08 95       	ret
 3c6:	41 11       	cpse	r20, r1
 3c8:	4b c0       	rjmp	.+150    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 3ca:	28 b3       	in	r18, 0x18	; 24
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_WRITE_PIN+0x7a>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_WRITE_PIN+0x76>
 3da:	80 95       	com	r24
 3dc:	82 23       	and	r24, r18
 3de:	88 bb       	out	0x18, r24	; 24
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	08 95       	ret
 3e4:	41 30       	cpi	r20, 0x01	; 1
 3e6:	61 f4       	brne	.+24     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e8:	25 b3       	in	r18, 0x15	; 21
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_WRITE_PIN+0x98>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_WRITE_PIN+0x94>
 3f8:	82 2b       	or	r24, r18
 3fa:	85 bb       	out	0x15, r24	; 21
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	08 95       	ret
 400:	41 11       	cpse	r20, r1
 402:	30 c0       	rjmp	.+96     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 404:	25 b3       	in	r18, 0x15	; 21
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	80 95       	com	r24
 416:	82 23       	and	r24, r18
 418:	85 bb       	out	0x15, r24	; 21
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	08 95       	ret
 41e:	41 30       	cpi	r20, 0x01	; 1
 420:	61 f4       	brne	.+24     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 422:	22 b3       	in	r18, 0x12	; 18
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	82 2b       	or	r24, r18
 434:	82 bb       	out	0x12, r24	; 18
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	08 95       	ret
 43a:	41 11       	cpse	r20, r1
 43c:	15 c0       	rjmp	.+42     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 43e:	22 b3       	in	r18, 0x12	; 18
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	80 95       	com	r24
 450:	82 23       	and	r24, r18
 452:	82 bb       	out	0x12, r24	; 18
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	08 95       	ret
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	08 95       	ret
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	08 95       	ret
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	08 95       	ret
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	08 95       	ret
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	08 95       	ret

0000046c <EDGE_SELECET>:
static void (*callback_int0) (void);
static void (*callback_int1) (void);
static void (*callback_int2) (void);
STD_return EDGE_SELECET (EN_EDGE_t edge,EN_INT_NUM_t ext_int)
{  STD_return ret_val=ok;
	switch(ext_int)
 46c:	61 30       	cpi	r22, 0x01	; 1
 46e:	c1 f0       	breq	.+48     	; 0x4a0 <EDGE_SELECET+0x34>
 470:	18 f0       	brcs	.+6      	; 0x478 <EDGE_SELECET+0xc>
 472:	62 30       	cpi	r22, 0x02	; 2
 474:	49 f1       	breq	.+82     	; 0x4c8 <EDGE_SELECET+0x5c>
 476:	36 c0       	rjmp	.+108    	; 0x4e4 <EDGE_SELECET+0x78>
	{
		case int0 : if(edge==rising)
 478:	81 11       	cpse	r24, r1
 47a:	08 c0       	rjmp	.+16     	; 0x48c <EDGE_SELECET+0x20>
		             {
						 SET_BIT(MCUCR,ISC00);
 47c:	85 b7       	in	r24, 0x35	; 53
 47e:	81 60       	ori	r24, 0x01	; 1
 480:	85 bf       	out	0x35, r24	; 53
						 SET_BIT(MCUCR,ISC01);
 482:	85 b7       	in	r24, 0x35	; 53
 484:	82 60       	ori	r24, 0x02	; 2
 486:	85 bf       	out	0x35, r24	; 53
/************************************************************************/
static void (*callback_int0) (void);
static void (*callback_int1) (void);
static void (*callback_int2) (void);
STD_return EDGE_SELECET (EN_EDGE_t edge,EN_INT_NUM_t ext_int)
{  STD_return ret_val=ok;
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	08 95       	ret
		case int0 : if(edge==rising)
		             {
						 SET_BIT(MCUCR,ISC00);
						 SET_BIT(MCUCR,ISC01);
					 }
					 else if(edge==falling)
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	61 f5       	brne	.+88     	; 0x4e8 <EDGE_SELECET+0x7c>
					 {
						 CLEAR_BIT(MCUCR,ISC00);
 490:	85 b7       	in	r24, 0x35	; 53
 492:	8e 7f       	andi	r24, 0xFE	; 254
 494:	85 bf       	out	0x35, r24	; 53
						 SET_BIT(MCUCR,ISC01);
 496:	85 b7       	in	r24, 0x35	; 53
 498:	82 60       	ori	r24, 0x02	; 2
 49a:	85 bf       	out	0x35, r24	; 53
/************************************************************************/
static void (*callback_int0) (void);
static void (*callback_int1) (void);
static void (*callback_int2) (void);
STD_return EDGE_SELECET (EN_EDGE_t edge,EN_INT_NUM_t ext_int)
{  STD_return ret_val=ok;
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	08 95       	ret
					 {
						 ret_val=not_ok;
					 }
					 break;
					 
		case int1 :if(edge==rising)
 4a0:	81 11       	cpse	r24, r1
 4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <EDGE_SELECET+0x48>
		{
			SET_BIT(MCUCR,ISC10);
 4a4:	85 b7       	in	r24, 0x35	; 53
 4a6:	84 60       	ori	r24, 0x04	; 4
 4a8:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 4aa:	85 b7       	in	r24, 0x35	; 53
 4ac:	88 60       	ori	r24, 0x08	; 8
 4ae:	85 bf       	out	0x35, r24	; 53
/************************************************************************/
static void (*callback_int0) (void);
static void (*callback_int1) (void);
static void (*callback_int2) (void);
STD_return EDGE_SELECET (EN_EDGE_t edge,EN_INT_NUM_t ext_int)
{  STD_return ret_val=ok;
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	08 95       	ret
		case int1 :if(edge==rising)
		{
			SET_BIT(MCUCR,ISC10);
			SET_BIT(MCUCR,ISC11);
		}
		else if(edge==falling)
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	d1 f4       	brne	.+52     	; 0x4ec <EDGE_SELECET+0x80>
		{
			CLEAR_BIT(MCUCR,ISC10);
 4b8:	85 b7       	in	r24, 0x35	; 53
 4ba:	8b 7f       	andi	r24, 0xFB	; 251
 4bc:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 4be:	85 b7       	in	r24, 0x35	; 53
 4c0:	88 60       	ori	r24, 0x08	; 8
 4c2:	85 bf       	out	0x35, r24	; 53
/************************************************************************/
static void (*callback_int0) (void);
static void (*callback_int1) (void);
static void (*callback_int2) (void);
STD_return EDGE_SELECET (EN_EDGE_t edge,EN_INT_NUM_t ext_int)
{  STD_return ret_val=ok;
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	08 95       	ret
		else
		{
			ret_val=not_ok;
		}
		break;
		case int2 : if(edge==rising)
 4c8:	81 11       	cpse	r24, r1
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <EDGE_SELECET+0x6a>
		{
			SET_BIT(MCUCSR,ISC2);
 4cc:	84 b7       	in	r24, 0x34	; 52
 4ce:	80 64       	ori	r24, 0x40	; 64
 4d0:	84 bf       	out	0x34, r24	; 52
/************************************************************************/
static void (*callback_int0) (void);
static void (*callback_int1) (void);
static void (*callback_int2) (void);
STD_return EDGE_SELECET (EN_EDGE_t edge,EN_INT_NUM_t ext_int)
{  STD_return ret_val=ok;
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret
		break;
		case int2 : if(edge==rising)
		{
			SET_BIT(MCUCSR,ISC2);
		}
		else if(edge==falling)
 4d6:	81 30       	cpi	r24, 0x01	; 1
 4d8:	59 f4       	brne	.+22     	; 0x4f0 <EDGE_SELECET+0x84>
		{
			CLEAR_BIT(MCUCSR,ISC2);
 4da:	84 b7       	in	r24, 0x34	; 52
 4dc:	8f 7b       	andi	r24, 0xBF	; 191
 4de:	84 bf       	out	0x34, r24	; 52
/************************************************************************/
static void (*callback_int0) (void);
static void (*callback_int1) (void);
static void (*callback_int2) (void);
STD_return EDGE_SELECET (EN_EDGE_t edge,EN_INT_NUM_t ext_int)
{  STD_return ret_val=ok;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	08 95       	ret
		else
		{
			ret_val=not_ok;
		}
		break;
		default: ret_val = not_ok; break;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	08 95       	ret
						 CLEAR_BIT(MCUCR,ISC00);
						 SET_BIT(MCUCR,ISC01);
					 }
					 else
					 {
						 ret_val=not_ok;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	08 95       	ret
			CLEAR_BIT(MCUCR,ISC10);
			SET_BIT(MCUCR,ISC11);
		}
		else
		{
			ret_val=not_ok;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	08 95       	ret
		{
			CLEAR_BIT(MCUCSR,ISC2);
		}
		else
		{
			ret_val=not_ok;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
		default: ret_val = not_ok; break;
	}
	return ret_val;
}
 4f2:	08 95       	ret

000004f4 <EXT_INTERRUPT_ENABLE>:
STD_return EXT_INTERRUPT_ENABLE (EN_INT_NUM_t ext_int)
{   STD_return ret_val=ok;
	switch(ext_int)
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	49 f0       	breq	.+18     	; 0x50a <EXT_INTERRUPT_ENABLE+0x16>
 4f8:	18 f0       	brcs	.+6      	; 0x500 <EXT_INTERRUPT_ENABLE+0xc>
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	59 f0       	breq	.+22     	; 0x514 <EXT_INTERRUPT_ENABLE+0x20>
 4fe:	0f c0       	rjmp	.+30     	; 0x51e <EXT_INTERRUPT_ENABLE+0x2a>
	{
		case int0: SET_BIT(GICR,INT0);break;
 500:	8b b7       	in	r24, 0x3b	; 59
 502:	80 64       	ori	r24, 0x40	; 64
 504:	8b bf       	out	0x3b, r24	; 59
		default: ret_val = not_ok; break;
	}
	return ret_val;
}
STD_return EXT_INTERRUPT_ENABLE (EN_INT_NUM_t ext_int)
{   STD_return ret_val=ok;
 506:	80 e0       	ldi	r24, 0x00	; 0
	switch(ext_int)
	{
		case int0: SET_BIT(GICR,INT0);break;
 508:	08 95       	ret
		case int1: SET_BIT(GICR,INT1);break;
 50a:	8b b7       	in	r24, 0x3b	; 59
 50c:	80 68       	ori	r24, 0x80	; 128
 50e:	8b bf       	out	0x3b, r24	; 59
		default: ret_val = not_ok; break;
	}
	return ret_val;
}
STD_return EXT_INTERRUPT_ENABLE (EN_INT_NUM_t ext_int)
{   STD_return ret_val=ok;
 510:	80 e0       	ldi	r24, 0x00	; 0
	switch(ext_int)
	{
		case int0: SET_BIT(GICR,INT0);break;
		case int1: SET_BIT(GICR,INT1);break;
 512:	08 95       	ret
		case int2: SET_BIT(GICR,INT2);break;
 514:	8b b7       	in	r24, 0x3b	; 59
 516:	80 62       	ori	r24, 0x20	; 32
 518:	8b bf       	out	0x3b, r24	; 59
		default: ret_val = not_ok; break;
	}
	return ret_val;
}
STD_return EXT_INTERRUPT_ENABLE (EN_INT_NUM_t ext_int)
{   STD_return ret_val=ok;
 51a:	80 e0       	ldi	r24, 0x00	; 0
	switch(ext_int)
	{
		case int0: SET_BIT(GICR,INT0);break;
		case int1: SET_BIT(GICR,INT1);break;
		case int2: SET_BIT(GICR,INT2);break;
 51c:	08 95       	ret
		default: ret_val=not_ok;
 51e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret_val;
}
 520:	08 95       	ret

00000522 <SETCALLBACK_FUN_INT0>:
STD_return SETCALLBACK_FUN_INT0(void (*ptr_int0) (void))
{    STD_return ret_val=ok;
	if(ptr_int0==NULL)
 522:	00 97       	sbiw	r24, 0x00	; 0
 524:	31 f0       	breq	.+12     	; 0x532 <SETCALLBACK_FUN_INT0+0x10>
	{
		ret_val=not_ok;
	}
	else
	{
		callback_int0=ptr_int0;
 526:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <callback_int0+0x1>
 52a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <callback_int0>
		default: ret_val=not_ok;
	}
	return ret_val;
}
STD_return SETCALLBACK_FUN_INT0(void (*ptr_int0) (void))
{    STD_return ret_val=ok;
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	08 95       	ret
	if(ptr_int0==NULL)
	{
		ret_val=not_ok;
 532:	81 e0       	ldi	r24, 0x01	; 1
	{
		callback_int0=ptr_int0;
		
	}
	return ret_val;
}
 534:	08 95       	ret

00000536 <SETCALLBACK_FUN_INT1>:
STD_return SETCALLBACK_FUN_INT1(void (*ptr_int1) (void))
{
	STD_return ret_val=ok;
	if(ptr_int1==NULL)
 536:	00 97       	sbiw	r24, 0x00	; 0
 538:	31 f0       	breq	.+12     	; 0x546 <SETCALLBACK_FUN_INT1+0x10>
	{
		ret_val=not_ok;
	}
	else
	{
		callback_int1=ptr_int1;
 53a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <callback_int1+0x1>
 53e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <callback_int1>
	}
	return ret_val;
}
STD_return SETCALLBACK_FUN_INT1(void (*ptr_int1) (void))
{
	STD_return ret_val=ok;
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	08 95       	ret
	if(ptr_int1==NULL)
	{
		ret_val=not_ok;
 546:	81 e0       	ldi	r24, 0x01	; 1
	{
		callback_int1=ptr_int1;
		
	}
	return ret_val;
}
 548:	08 95       	ret

0000054a <SETCALLBACK_FUN_INT2>:
STD_return SETCALLBACK_FUN_INT2(void (*ptr_int2) (void))
{
	STD_return ret_val=ok;
	if(ptr_int2==NULL)
 54a:	00 97       	sbiw	r24, 0x00	; 0
 54c:	31 f0       	breq	.+12     	; 0x55a <SETCALLBACK_FUN_INT2+0x10>
	{
		ret_val=not_ok;
	}
	else
	{
		callback_int2=ptr_int2;
 54e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <callback_int2+0x1>
 552:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <callback_int2>
	}
	return ret_val;
}
STD_return SETCALLBACK_FUN_INT2(void (*ptr_int2) (void))
{
	STD_return ret_val=ok;
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	08 95       	ret
	if(ptr_int2==NULL)
	{
		ret_val=not_ok;
 55a:	81 e0       	ldi	r24, 0x01	; 1
	{
		callback_int2=ptr_int2;
		
	}
	return ret_val;
}
 55c:	08 95       	ret

0000055e <__vector_1>:

ISR(EXT_INT0)
{
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	2f 93       	push	r18
 56a:	3f 93       	push	r19
 56c:	4f 93       	push	r20
 56e:	5f 93       	push	r21
 570:	6f 93       	push	r22
 572:	7f 93       	push	r23
 574:	8f 93       	push	r24
 576:	9f 93       	push	r25
 578:	af 93       	push	r26
 57a:	bf 93       	push	r27
 57c:	ef 93       	push	r30
 57e:	ff 93       	push	r31
	callback_int0();
 580:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <callback_int0>
 584:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <callback_int0+0x1>
 588:	09 95       	icall
}
 58a:	ff 91       	pop	r31
 58c:	ef 91       	pop	r30
 58e:	bf 91       	pop	r27
 590:	af 91       	pop	r26
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	7f 91       	pop	r23
 598:	6f 91       	pop	r22
 59a:	5f 91       	pop	r21
 59c:	4f 91       	pop	r20
 59e:	3f 91       	pop	r19
 5a0:	2f 91       	pop	r18
 5a2:	0f 90       	pop	r0
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	0f 90       	pop	r0
 5a8:	1f 90       	pop	r1
 5aa:	18 95       	reti

000005ac <__vector_2>:
ISR(EXT_INT1)
{
 5ac:	1f 92       	push	r1
 5ae:	0f 92       	push	r0
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	0f 92       	push	r0
 5b4:	11 24       	eor	r1, r1
 5b6:	2f 93       	push	r18
 5b8:	3f 93       	push	r19
 5ba:	4f 93       	push	r20
 5bc:	5f 93       	push	r21
 5be:	6f 93       	push	r22
 5c0:	7f 93       	push	r23
 5c2:	8f 93       	push	r24
 5c4:	9f 93       	push	r25
 5c6:	af 93       	push	r26
 5c8:	bf 93       	push	r27
 5ca:	ef 93       	push	r30
 5cc:	ff 93       	push	r31
	callback_int1();
 5ce:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <callback_int1>
 5d2:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <callback_int1+0x1>
 5d6:	09 95       	icall
}
 5d8:	ff 91       	pop	r31
 5da:	ef 91       	pop	r30
 5dc:	bf 91       	pop	r27
 5de:	af 91       	pop	r26
 5e0:	9f 91       	pop	r25
 5e2:	8f 91       	pop	r24
 5e4:	7f 91       	pop	r23
 5e6:	6f 91       	pop	r22
 5e8:	5f 91       	pop	r21
 5ea:	4f 91       	pop	r20
 5ec:	3f 91       	pop	r19
 5ee:	2f 91       	pop	r18
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <__vector_3>:
ISR(EXT_INT2)
{
 5fa:	1f 92       	push	r1
 5fc:	0f 92       	push	r0
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	0f 92       	push	r0
 602:	11 24       	eor	r1, r1
 604:	2f 93       	push	r18
 606:	3f 93       	push	r19
 608:	4f 93       	push	r20
 60a:	5f 93       	push	r21
 60c:	6f 93       	push	r22
 60e:	7f 93       	push	r23
 610:	8f 93       	push	r24
 612:	9f 93       	push	r25
 614:	af 93       	push	r26
 616:	bf 93       	push	r27
 618:	ef 93       	push	r30
 61a:	ff 93       	push	r31
	callback_int2();
 61c:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <callback_int2>
 620:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <callback_int2+0x1>
 624:	09 95       	icall
 626:	ff 91       	pop	r31
 628:	ef 91       	pop	r30
 62a:	bf 91       	pop	r27
 62c:	af 91       	pop	r26
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	7f 91       	pop	r23
 634:	6f 91       	pop	r22
 636:	5f 91       	pop	r21
 638:	4f 91       	pop	r20
 63a:	3f 91       	pop	r19
 63c:	2f 91       	pop	r18
 63e:	0f 90       	pop	r0
 640:	0f be       	out	0x3f, r0	; 63
 642:	0f 90       	pop	r0
 644:	1f 90       	pop	r1
 646:	18 95       	reti

00000648 <_exit>:
 648:	f8 94       	cli

0000064a <__stop_program>:
 64a:	ff cf       	rjmp	.-2      	; 0x64a <__stop_program>
