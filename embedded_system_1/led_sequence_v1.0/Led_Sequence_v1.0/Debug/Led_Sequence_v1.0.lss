
Led_Sequence_v1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000656  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000656  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ef  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091e  00000000  00000000  00001883  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000980  00000000  00000000  000021a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000481  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000624  00000000  00000000  000030e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003705  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  74:	0c 94 ef 02 	jmp	0x5de	; 0x5de <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_INIT>:
static uint8_t flag=0;
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return APP_INIT(void)
{   DIO_WRITE_PIN(porta,pin4,OUTPUT);
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	2a 97       	sbiw	r28, 0x0a	; 10
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	64 e0       	ldi	r22, 0x04	; 4
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 00 02 	call	0x400	; 0x400 <DIO_WRITE_PIN>
	STD_return ret_val=ok;
	LED led_1={porta,led1};
  9c:	19 82       	std	Y+1, r1	; 0x01
  9e:	1a 82       	std	Y+2, r1	; 0x02
	LED led_2={porta,led2};
  a0:	1b 82       	std	Y+3, r1	; 0x03
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	8c 83       	std	Y+4, r24	; 0x04
	LED led_3={porta,led3};
  a6:	1d 82       	std	Y+5, r1	; 0x05
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	8e 83       	std	Y+6, r24	; 0x06
	LED led_4={porta,led4};
  ac:	1f 82       	std	Y+7, r1	; 0x07
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	88 87       	std	Y+8, r24	; 0x08
	BUTTON button={porta,button_1};
  b2:	19 86       	std	Y+9, r1	; 0x09
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	8a 87       	std	Y+10, r24	; 0x0a
	ret_val|=LED_INIT(&led_1);
  b8:	ce 01       	movw	r24, r28
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_INIT>
  c0:	18 2f       	mov	r17, r24
	ret_val|=LED_INIT(&led_2);
  c2:	ce 01       	movw	r24, r28
  c4:	03 96       	adiw	r24, 0x03	; 3
  c6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_INIT>
  ca:	18 2b       	or	r17, r24
	ret_val|=LED_INIT(&led_3);
  cc:	ce 01       	movw	r24, r28
  ce:	05 96       	adiw	r24, 0x05	; 5
  d0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_INIT>
  d4:	18 2b       	or	r17, r24
	ret_val|=LED_INIT(&led_4);
  d6:	ce 01       	movw	r24, r28
  d8:	07 96       	adiw	r24, 0x07	; 7
  da:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_INIT>
  de:	18 2b       	or	r17, r24
	ret_val|=BUTTON_INIT(&button);
  e0:	ce 01       	movw	r24, r28
  e2:	09 96       	adiw	r24, 0x09	; 9
  e4:	0e 94 48 01 	call	0x290	; 0x290 <BUTTON_INIT>
		
		return ret_val;
}
  e8:	81 2b       	or	r24, r17
  ea:	2a 96       	adiw	r28, 0x0a	; 10
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	08 95       	ret

000000fe <APP_START>:
void APP_START(void)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	1f 92       	push	r1
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
	EN_BUTTON_STATE_t state;
	
	BUTTON_READ(porta,pin4,&state);
 108:	ae 01       	movw	r20, r28
 10a:	4f 5f       	subi	r20, 0xFF	; 255
 10c:	5f 4f       	sbci	r21, 0xFF	; 255
 10e:	64 e0       	ldi	r22, 0x04	; 4
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 54 01 	call	0x2a8	; 0x2a8 <BUTTON_READ>
	if(flag==0 && state==RELEASED)
 116:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	81 11       	cpse	r24, r1
 11c:	07 c0       	rjmp	.+14     	; 0x12c <APP_START+0x2e>
 11e:	99 81       	ldd	r25, Y+1	; 0x01
 120:	91 30       	cpi	r25, 0x01	; 1
 122:	21 f4       	brne	.+8      	; 0x12c <APP_START+0x2e>
	{
		flag=1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	ae c0       	rjmp	.+348    	; 0x288 <APP_START+0x18a>
	}
	else if(flag==1 && state==PUSHED)
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	39 f4       	brne	.+14     	; 0x13e <APP_START+0x40>
 130:	99 81       	ldd	r25, Y+1	; 0x01
 132:	91 11       	cpse	r25, r1
 134:	04 c0       	rjmp	.+8      	; 0x13e <APP_START+0x40>
	{	
		flag=2;		
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 13c:	a5 c0       	rjmp	.+330    	; 0x288 <APP_START+0x18a>
	}
	else if(flag==2 && state==RELEASED)
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	59 f4       	brne	.+22     	; 0x158 <APP_START+0x5a>
 142:	99 81       	ldd	r25, Y+1	; 0x01
 144:	91 30       	cpi	r25, 0x01	; 1
 146:	41 f4       	brne	.+16     	; 0x158 <APP_START+0x5a>
	{
		LED_ON(porta,led1);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LED_ON>
		flag=3;
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 156:	98 c0       	rjmp	.+304    	; 0x288 <APP_START+0x18a>
	}
	else if(flag==3 && state==PUSHED)
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	39 f4       	brne	.+14     	; 0x16a <APP_START+0x6c>
 15c:	99 81       	ldd	r25, Y+1	; 0x01
 15e:	91 11       	cpse	r25, r1
 160:	04 c0       	rjmp	.+8      	; 0x16a <APP_START+0x6c>
	{
		flag=4;
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 168:	8f c0       	rjmp	.+286    	; 0x288 <APP_START+0x18a>
	}
	else if(flag==4 && state==RELEASED)
 16a:	84 30       	cpi	r24, 0x04	; 4
 16c:	59 f4       	brne	.+22     	; 0x184 <APP_START+0x86>
 16e:	99 81       	ldd	r25, Y+1	; 0x01
 170:	91 30       	cpi	r25, 0x01	; 1
 172:	41 f4       	brne	.+16     	; 0x184 <APP_START+0x86>
	{
		LED_ON(porta,led2);
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LED_ON>
		flag=5;
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 182:	82 c0       	rjmp	.+260    	; 0x288 <APP_START+0x18a>
	}
	else if(flag==5 && state==PUSHED)
 184:	85 30       	cpi	r24, 0x05	; 5
 186:	39 f4       	brne	.+14     	; 0x196 <APP_START+0x98>
 188:	99 81       	ldd	r25, Y+1	; 0x01
 18a:	91 11       	cpse	r25, r1
 18c:	04 c0       	rjmp	.+8      	; 0x196 <APP_START+0x98>
	{
		flag=6;
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 194:	79 c0       	rjmp	.+242    	; 0x288 <APP_START+0x18a>
	}
	else if(flag==6 && state==RELEASED)
 196:	86 30       	cpi	r24, 0x06	; 6
 198:	59 f4       	brne	.+22     	; 0x1b0 <APP_START+0xb2>
 19a:	99 81       	ldd	r25, Y+1	; 0x01
 19c:	91 30       	cpi	r25, 0x01	; 1
 19e:	41 f4       	brne	.+16     	; 0x1b0 <APP_START+0xb2>
	{	
		LED_ON(porta,led3);
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LED_ON>
		flag=7;
 1a8:	87 e0       	ldi	r24, 0x07	; 7
 1aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ae:	6c c0       	rjmp	.+216    	; 0x288 <APP_START+0x18a>
	}
	else if(flag==7 && state==PUSHED)
 1b0:	87 30       	cpi	r24, 0x07	; 7
 1b2:	39 f4       	brne	.+14     	; 0x1c2 <APP_START+0xc4>
 1b4:	99 81       	ldd	r25, Y+1	; 0x01
 1b6:	91 11       	cpse	r25, r1
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <APP_START+0xc4>
	{
		flag=8;
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c0:	63 c0       	rjmp	.+198    	; 0x288 <APP_START+0x18a>
	}
	else if(flag==8 && state==RELEASED)
 1c2:	88 30       	cpi	r24, 0x08	; 8
 1c4:	59 f4       	brne	.+22     	; 0x1dc <APP_START+0xde>
 1c6:	99 81       	ldd	r25, Y+1	; 0x01
 1c8:	91 30       	cpi	r25, 0x01	; 1
 1ca:	41 f4       	brne	.+16     	; 0x1dc <APP_START+0xde>
	{
		LED_ON(porta,led4);
 1cc:	63 e0       	ldi	r22, 0x03	; 3
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LED_ON>
		flag=9;
 1d4:	89 e0       	ldi	r24, 0x09	; 9
 1d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1da:	56 c0       	rjmp	.+172    	; 0x288 <APP_START+0x18a>
	}
	else if(flag==9 && state==PUSHED)
 1dc:	89 30       	cpi	r24, 0x09	; 9
 1de:	39 f4       	brne	.+14     	; 0x1ee <APP_START+0xf0>
 1e0:	99 81       	ldd	r25, Y+1	; 0x01
 1e2:	91 11       	cpse	r25, r1
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <APP_START+0xf0>
	{
		flag=10;
 1e6:	8a e0       	ldi	r24, 0x0A	; 10
 1e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ec:	4d c0       	rjmp	.+154    	; 0x288 <APP_START+0x18a>
	}
	else if(flag==10 && state==RELEASED)
 1ee:	8a 30       	cpi	r24, 0x0A	; 10
 1f0:	59 f4       	brne	.+22     	; 0x208 <APP_START+0x10a>
 1f2:	99 81       	ldd	r25, Y+1	; 0x01
 1f4:	91 30       	cpi	r25, 0x01	; 1
 1f6:	41 f4       	brne	.+16     	; 0x208 <APP_START+0x10a>
	{
		LED_OFF(porta,led1);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_OFF>
		flag=11;
 200:	8b e0       	ldi	r24, 0x0B	; 11
 202:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 206:	40 c0       	rjmp	.+128    	; 0x288 <APP_START+0x18a>
	}
	else if(flag==11 && state==PUSHED)
 208:	8b 30       	cpi	r24, 0x0B	; 11
 20a:	39 f4       	brne	.+14     	; 0x21a <APP_START+0x11c>
 20c:	99 81       	ldd	r25, Y+1	; 0x01
 20e:	91 11       	cpse	r25, r1
 210:	04 c0       	rjmp	.+8      	; 0x21a <APP_START+0x11c>
	{
		flag=12;
 212:	8c e0       	ldi	r24, 0x0C	; 12
 214:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 218:	37 c0       	rjmp	.+110    	; 0x288 <APP_START+0x18a>
	}
	else if(flag==12 && state==RELEASED)
 21a:	8c 30       	cpi	r24, 0x0C	; 12
 21c:	59 f4       	brne	.+22     	; 0x234 <APP_START+0x136>
 21e:	99 81       	ldd	r25, Y+1	; 0x01
 220:	91 30       	cpi	r25, 0x01	; 1
 222:	41 f4       	brne	.+16     	; 0x234 <APP_START+0x136>
	{
		LED_OFF(porta,led2);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_OFF>
		flag=13;
 22c:	8d e0       	ldi	r24, 0x0D	; 13
 22e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 232:	2a c0       	rjmp	.+84     	; 0x288 <APP_START+0x18a>
	}
	else if(flag==13 && state==PUSHED)
 234:	8d 30       	cpi	r24, 0x0D	; 13
 236:	39 f4       	brne	.+14     	; 0x246 <APP_START+0x148>
 238:	99 81       	ldd	r25, Y+1	; 0x01
 23a:	91 11       	cpse	r25, r1
 23c:	04 c0       	rjmp	.+8      	; 0x246 <APP_START+0x148>
	{
		flag=14;
 23e:	8e e0       	ldi	r24, 0x0E	; 14
 240:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 244:	21 c0       	rjmp	.+66     	; 0x288 <APP_START+0x18a>
	}
	else if(flag==14 && state==RELEASED)
 246:	8e 30       	cpi	r24, 0x0E	; 14
 248:	59 f4       	brne	.+22     	; 0x260 <APP_START+0x162>
 24a:	99 81       	ldd	r25, Y+1	; 0x01
 24c:	91 30       	cpi	r25, 0x01	; 1
 24e:	41 f4       	brne	.+16     	; 0x260 <APP_START+0x162>
	{
		LED_OFF(porta,led3);
 250:	62 e0       	ldi	r22, 0x02	; 2
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_OFF>
		flag=15;
 258:	8f e0       	ldi	r24, 0x0F	; 15
 25a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 25e:	14 c0       	rjmp	.+40     	; 0x288 <APP_START+0x18a>
	}
	else if(flag==15 && state==PUSHED)
 260:	8f 30       	cpi	r24, 0x0F	; 15
 262:	39 f4       	brne	.+14     	; 0x272 <APP_START+0x174>
 264:	99 81       	ldd	r25, Y+1	; 0x01
 266:	91 11       	cpse	r25, r1
 268:	04 c0       	rjmp	.+8      	; 0x272 <APP_START+0x174>
	{
		flag=16;
 26a:	80 e1       	ldi	r24, 0x10	; 16
 26c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 270:	0b c0       	rjmp	.+22     	; 0x288 <APP_START+0x18a>
	}
	else if(flag==16 && state==RELEASED)
 272:	80 31       	cpi	r24, 0x10	; 16
 274:	49 f4       	brne	.+18     	; 0x288 <APP_START+0x18a>
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	31 f4       	brne	.+12     	; 0x288 <APP_START+0x18a>
	{
		LED_OFF(porta,led4);
 27c:	63 e0       	ldi	r22, 0x03	; 3
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_OFF>
		flag=0;
 284:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
	
 288:	0f 90       	pop	r0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <BUTTON_INIT>:
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return BUTTON_INIT (BUTTON*  button)
{   STD_return ret_val=ok;
	if(button==NULL)
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	41 f0       	breq	.+16     	; 0x2a4 <BUTTON_INIT+0x14>
 294:	fc 01       	movw	r30, r24
	{
		ret_val=not_ok;
	}
	else
	{
		DIO_INIT(button->port,button->pin,INPUT);
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	61 81       	ldd	r22, Z+1	; 0x01
 29a:	80 81       	ld	r24, Z
 29c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_INIT>
#include "button.h"
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return BUTTON_INIT (BUTTON*  button)
{   STD_return ret_val=ok;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	08 95       	ret
	if(button==NULL)
	{
		ret_val=not_ok;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
	{
		DIO_INIT(button->port,button->pin,INPUT);
	}
	
	return ret_val;
}
 2a6:	08 95       	ret

000002a8 <BUTTON_READ>:
STD_return BUTTON_READ (DIO_PORTS port, DIO_PINS pin, EN_BUTTON_STATE_t* value)
{
	 STD_return ret_val=ok;
	 DIO_READ_PIN(port,pin,value);
 2a8:	0e 94 88 02 	call	0x510	; 0x510 <DIO_READ_PIN>
	 return ret_val;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	08 95       	ret

000002b0 <LED_INIT>:
/* functions implementations                                            */
/************************************************************************/
STD_return LED_INIT (LED* led)
{
	STD_return ret_val=ok;
	if(led==NULL)
 2b0:	00 97       	sbiw	r24, 0x00	; 0
 2b2:	41 f0       	breq	.+16     	; 0x2c4 <LED_INIT+0x14>
 2b4:	fc 01       	movw	r30, r24
	{
		ret_val=not_ok;
	}
	else
	{
		DIO_INIT(led->port,led->pin,OUTPUT);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	61 81       	ldd	r22, Z+1	; 0x01
 2ba:	80 81       	ld	r24, Z
 2bc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_INIT>
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return LED_INIT (LED* led)
{
	STD_return ret_val=ok;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
	if(led==NULL)
	{
		ret_val=not_ok;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
	{
		DIO_INIT(led->port,led->pin,OUTPUT);
	}
	
	return ret_val;
}
 2c6:	08 95       	ret

000002c8 <LED_ON>:
STD_return LED_ON (DIO_PORTS port, DIO_PINS pin)
{
	STD_return ret_val=ok;
	DIO_WRITE_PIN(port,pin,HIGH);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	0e 94 00 02 	call	0x400	; 0x400 <DIO_WRITE_PIN>
	return ret_val;
}
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 95       	ret

000002d2 <LED_OFF>:
STD_return LED_OFF (DIO_PORTS port,DIO_PINS pin)
{
	STD_return ret_val=ok;
	DIO_WRITE_PIN(port,pin,LOW);
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	0e 94 00 02 	call	0x400	; 0x400 <DIO_WRITE_PIN>
	return ret_val;
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret

000002dc <main>:
#include "APPLICATION/app.h"


int main(void)
{   
   if(APP_INIT()==ok)
 2dc:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_INIT>
 2e0:	81 11       	cpse	r24, r1
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <main+0xe>
   {
	   while (1)
	   {
		   APP_START();
 2e4:	0e 94 7f 00 	call	0xfe	; 0xfe <APP_START>
 2e8:	fd cf       	rjmp	.-6      	; 0x2e4 <main+0x8>
	   //close the program
   }

   
   
}
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	08 95       	ret

000002f0 <DIO_INIT>:
/* functions implementations                                            */
/************************************************************************/
STD_return DIO_INIT (DIO_PORTS port, DIO_PINS pin, PIN_DIRECTION direction)
{
	STD_return ret_val=ok;
	switch(port)
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	29 f1       	breq	.+74     	; 0x33e <DIO_INIT+0x4e>
 2f4:	38 f0       	brcs	.+14     	; 0x304 <DIO_INIT+0x14>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	09 f4       	brne	.+2      	; 0x2fc <DIO_INIT+0xc>
 2fa:	3e c0       	rjmp	.+124    	; 0x378 <DIO_INIT+0x88>
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	09 f4       	brne	.+2      	; 0x302 <DIO_INIT+0x12>
 300:	58 c0       	rjmp	.+176    	; 0x3b2 <DIO_INIT+0xc2>
 302:	74 c0       	rjmp	.+232    	; 0x3ec <DIO_INIT+0xfc>
	{
		case porta: if(direction==OUTPUT)
 304:	41 30       	cpi	r20, 0x01	; 1
 306:	61 f4       	brne	.+24     	; 0x320 <DIO_INIT+0x30>
		            {
						SET_BIT(DDRA,pin);
 308:	2a b3       	in	r18, 0x1a	; 26
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_INIT+0x24>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_INIT+0x20>
 318:	82 2b       	or	r24, r18
 31a:	8a bb       	out	0x1a, r24	; 26
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return DIO_INIT (DIO_PORTS port, DIO_PINS pin, PIN_DIRECTION direction)
{
	STD_return ret_val=ok;
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	08 95       	ret
	{
		case porta: if(direction==OUTPUT)
		            {
						SET_BIT(DDRA,pin);
					}
					else if(direction==INPUT)
 320:	41 11       	cpse	r20, r1
 322:	66 c0       	rjmp	.+204    	; 0x3f0 <DIO_INIT+0x100>
					{
						CLEAR_BIT(DDRA,pin);
 324:	2a b3       	in	r18, 0x1a	; 26
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_INIT+0x40>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_INIT+0x3c>
 334:	80 95       	com	r24
 336:	82 23       	and	r24, r18
 338:	8a bb       	out	0x1a, r24	; 26
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return DIO_INIT (DIO_PORTS port, DIO_PINS pin, PIN_DIRECTION direction)
{
	STD_return ret_val=ok;
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	08 95       	ret
					else
					{
						ret_val=not_ok;
					}
					break;
	   case portb: if(direction==OUTPUT)
 33e:	41 30       	cpi	r20, 0x01	; 1
 340:	61 f4       	brne	.+24     	; 0x35a <DIO_INIT+0x6a>
	                {
		                 SET_BIT(DDRB,pin);
 342:	27 b3       	in	r18, 0x17	; 23
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_INIT+0x5e>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_INIT+0x5a>
 352:	82 2b       	or	r24, r18
 354:	87 bb       	out	0x17, r24	; 23
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return DIO_INIT (DIO_PORTS port, DIO_PINS pin, PIN_DIRECTION direction)
{
	STD_return ret_val=ok;
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
					break;
	   case portb: if(direction==OUTPUT)
	                {
		                 SET_BIT(DDRB,pin);
	                }
	                else if(direction==INPUT)
 35a:	41 11       	cpse	r20, r1
 35c:	4b c0       	rjmp	.+150    	; 0x3f4 <DIO_INIT+0x104>
	                {
		                CLEAR_BIT(DDRB,pin);
 35e:	27 b3       	in	r18, 0x17	; 23
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_INIT+0x7a>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_INIT+0x76>
 36e:	80 95       	com	r24
 370:	82 23       	and	r24, r18
 372:	87 bb       	out	0x17, r24	; 23
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return DIO_INIT (DIO_PORTS port, DIO_PINS pin, PIN_DIRECTION direction)
{
	STD_return ret_val=ok;
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	08 95       	ret
	                else
	                {
		             ret_val=not_ok;
	                }
	                break;
	 case portc: if(direction==OUTPUT)
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	61 f4       	brne	.+24     	; 0x394 <DIO_INIT+0xa4>
					{
						SET_BIT(DDRC,pin);
 37c:	24 b3       	in	r18, 0x14	; 20
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_INIT+0x98>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_INIT+0x94>
 38c:	82 2b       	or	r24, r18
 38e:	84 bb       	out	0x14, r24	; 20
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return DIO_INIT (DIO_PORTS port, DIO_PINS pin, PIN_DIRECTION direction)
{
	STD_return ret_val=ok;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret
	                break;
	 case portc: if(direction==OUTPUT)
					{
						SET_BIT(DDRC,pin);
					}
					else if(direction==INPUT)
 394:	41 11       	cpse	r20, r1
 396:	30 c0       	rjmp	.+96     	; 0x3f8 <DIO_INIT+0x108>
					{
						CLEAR_BIT(DDRC,pin);
 398:	24 b3       	in	r18, 0x14	; 20
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_INIT+0xb4>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_INIT+0xb0>
 3a8:	80 95       	com	r24
 3aa:	82 23       	and	r24, r18
 3ac:	84 bb       	out	0x14, r24	; 20
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return DIO_INIT (DIO_PORTS port, DIO_PINS pin, PIN_DIRECTION direction)
{
	STD_return ret_val=ok;
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	08 95       	ret
					else
					{
						ret_val=not_ok;
					}
					break;
		case portd: if(direction==OUTPUT)
 3b2:	41 30       	cpi	r20, 0x01	; 1
 3b4:	61 f4       	brne	.+24     	; 0x3ce <DIO_INIT+0xde>
					{
						SET_BIT(DDRD,pin);
 3b6:	21 b3       	in	r18, 0x11	; 17
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_INIT+0xd2>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_INIT+0xce>
 3c6:	82 2b       	or	r24, r18
 3c8:	81 bb       	out	0x11, r24	; 17
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return DIO_INIT (DIO_PORTS port, DIO_PINS pin, PIN_DIRECTION direction)
{
	STD_return ret_val=ok;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret
					break;
		case portd: if(direction==OUTPUT)
					{
						SET_BIT(DDRD,pin);
					}
					else if(direction==INPUT)
 3ce:	41 11       	cpse	r20, r1
 3d0:	15 c0       	rjmp	.+42     	; 0x3fc <DIO_INIT+0x10c>
					{
						CLEAR_BIT(DDRD,pin);
 3d2:	21 b3       	in	r18, 0x11	; 17
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_INIT+0xee>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_INIT+0xea>
 3e2:	80 95       	com	r24
 3e4:	82 23       	and	r24, r18
 3e6:	81 bb       	out	0x11, r24	; 17
/************************************************************************/
/* functions implementations                                            */
/************************************************************************/
STD_return DIO_INIT (DIO_PORTS port, DIO_PINS pin, PIN_DIRECTION direction)
{
	STD_return ret_val=ok;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
					{
						CLEAR_BIT(DDRA,pin);
					}
					else
					{
						ret_val=not_ok;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	08 95       	ret
	                {
		                CLEAR_BIT(DDRB,pin);
	                }
	                else
	                {
		             ret_val=not_ok;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	08 95       	ret
					{
						CLEAR_BIT(DDRC,pin);
					}
					else
					{
						ret_val=not_ok;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	08 95       	ret
					{
						CLEAR_BIT(DDRD,pin);
					}
					else
					{
						ret_val=not_ok;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
					}
					break;
	}
	return ret_val;
}
 3fe:	08 95       	ret

00000400 <DIO_WRITE_PIN>:
STD_return DIO_WRITE_PIN (DIO_PORTS port, DIO_PINS pin, PIN_STATE state)
{
	STD_return ret_val=ok;
	switch(port)
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	29 f1       	breq	.+74     	; 0x44e <DIO_WRITE_PIN+0x4e>
 404:	38 f0       	brcs	.+14     	; 0x414 <DIO_WRITE_PIN+0x14>
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	09 f4       	brne	.+2      	; 0x40c <DIO_WRITE_PIN+0xc>
 40a:	3e c0       	rjmp	.+124    	; 0x488 <DIO_WRITE_PIN+0x88>
 40c:	83 30       	cpi	r24, 0x03	; 3
 40e:	09 f4       	brne	.+2      	; 0x412 <DIO_WRITE_PIN+0x12>
 410:	58 c0       	rjmp	.+176    	; 0x4c2 <DIO_WRITE_PIN+0xc2>
 412:	74 c0       	rjmp	.+232    	; 0x4fc <DIO_WRITE_PIN+0xfc>
	{
		case porta: if(state==HIGH)
 414:	41 30       	cpi	r20, 0x01	; 1
 416:	61 f4       	brne	.+24     	; 0x430 <DIO_WRITE_PIN+0x30>
		{
			SET_BIT(PORTA,pin);
 418:	2b b3       	in	r18, 0x1b	; 27
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_WRITE_PIN+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_WRITE_PIN+0x20>
 428:	82 2b       	or	r24, r18
 42a:	8b bb       	out	0x1b, r24	; 27
	}
	return ret_val;
}
STD_return DIO_WRITE_PIN (DIO_PORTS port, DIO_PINS pin, PIN_STATE state)
{
	STD_return ret_val=ok;
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret
	{
		case porta: if(state==HIGH)
		{
			SET_BIT(PORTA,pin);
		}
		else if(state==LOW)
 430:	41 11       	cpse	r20, r1
 432:	66 c0       	rjmp	.+204    	; 0x500 <DIO_WRITE_PIN+0x100>
		{
			CLEAR_BIT(PORTA,pin);
 434:	2b b3       	in	r18, 0x1b	; 27
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_WRITE_PIN+0x40>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_WRITE_PIN+0x3c>
 444:	80 95       	com	r24
 446:	82 23       	and	r24, r18
 448:	8b bb       	out	0x1b, r24	; 27
	}
	return ret_val;
}
STD_return DIO_WRITE_PIN (DIO_PORTS port, DIO_PINS pin, PIN_STATE state)
{
	STD_return ret_val=ok;
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	08 95       	ret
		else
		{
			ret_val=not_ok;
		}
		break;
		case portb: if(state==HIGH)
 44e:	41 30       	cpi	r20, 0x01	; 1
 450:	61 f4       	brne	.+24     	; 0x46a <DIO_WRITE_PIN+0x6a>
		{
			SET_BIT(PORTB,pin);
 452:	28 b3       	in	r18, 0x18	; 24
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_WRITE_PIN+0x5e>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_WRITE_PIN+0x5a>
 462:	82 2b       	or	r24, r18
 464:	88 bb       	out	0x18, r24	; 24
	}
	return ret_val;
}
STD_return DIO_WRITE_PIN (DIO_PORTS port, DIO_PINS pin, PIN_STATE state)
{
	STD_return ret_val=ok;
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	08 95       	ret
		break;
		case portb: if(state==HIGH)
		{
			SET_BIT(PORTB,pin);
		}
		else if(state==LOW)
 46a:	41 11       	cpse	r20, r1
 46c:	4b c0       	rjmp	.+150    	; 0x504 <DIO_WRITE_PIN+0x104>
		{
			CLEAR_BIT(PORTB,pin);
 46e:	28 b3       	in	r18, 0x18	; 24
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_WRITE_PIN+0x7a>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_WRITE_PIN+0x76>
 47e:	80 95       	com	r24
 480:	82 23       	and	r24, r18
 482:	88 bb       	out	0x18, r24	; 24
	}
	return ret_val;
}
STD_return DIO_WRITE_PIN (DIO_PORTS port, DIO_PINS pin, PIN_STATE state)
{
	STD_return ret_val=ok;
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	08 95       	ret
		else
		{
			ret_val=not_ok;
		}
		break;
		case portc: if(state==HIGH)
 488:	41 30       	cpi	r20, 0x01	; 1
 48a:	61 f4       	brne	.+24     	; 0x4a4 <DIO_WRITE_PIN+0xa4>
		{
			SET_BIT(PORTC,pin);
 48c:	25 b3       	in	r18, 0x15	; 21
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_WRITE_PIN+0x98>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_WRITE_PIN+0x94>
 49c:	82 2b       	or	r24, r18
 49e:	85 bb       	out	0x15, r24	; 21
	}
	return ret_val;
}
STD_return DIO_WRITE_PIN (DIO_PORTS port, DIO_PINS pin, PIN_STATE state)
{
	STD_return ret_val=ok;
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	08 95       	ret
		break;
		case portc: if(state==HIGH)
		{
			SET_BIT(PORTC,pin);
		}
		else if(state==LOW)
 4a4:	41 11       	cpse	r20, r1
 4a6:	30 c0       	rjmp	.+96     	; 0x508 <DIO_WRITE_PIN+0x108>
		{
			CLEAR_BIT(PORTC,pin);
 4a8:	25 b3       	in	r18, 0x15	; 21
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_WRITE_PIN+0xb4>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_WRITE_PIN+0xb0>
 4b8:	80 95       	com	r24
 4ba:	82 23       	and	r24, r18
 4bc:	85 bb       	out	0x15, r24	; 21
	}
	return ret_val;
}
STD_return DIO_WRITE_PIN (DIO_PORTS port, DIO_PINS pin, PIN_STATE state)
{
	STD_return ret_val=ok;
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	08 95       	ret
		else
		{
			ret_val=not_ok;
		}
		break;
		case portd: if(state==HIGH)
 4c2:	41 30       	cpi	r20, 0x01	; 1
 4c4:	61 f4       	brne	.+24     	; 0x4de <DIO_WRITE_PIN+0xde>
		{
			SET_BIT(PORTD,pin);
 4c6:	22 b3       	in	r18, 0x12	; 18
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_WRITE_PIN+0xd2>
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_WRITE_PIN+0xce>
 4d6:	82 2b       	or	r24, r18
 4d8:	82 bb       	out	0x12, r24	; 18
	}
	return ret_val;
}
STD_return DIO_WRITE_PIN (DIO_PORTS port, DIO_PINS pin, PIN_STATE state)
{
	STD_return ret_val=ok;
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 95       	ret
		break;
		case portd: if(state==HIGH)
		{
			SET_BIT(PORTD,pin);
		}
		else if(state==LOW)
 4de:	41 11       	cpse	r20, r1
 4e0:	15 c0       	rjmp	.+42     	; 0x50c <DIO_WRITE_PIN+0x10c>
		{
			CLEAR_BIT(PORTD,pin);
 4e2:	22 b3       	in	r18, 0x12	; 18
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_WRITE_PIN+0xee>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_WRITE_PIN+0xea>
 4f2:	80 95       	com	r24
 4f4:	82 23       	and	r24, r18
 4f6:	82 bb       	out	0x12, r24	; 18
	}
	return ret_val;
}
STD_return DIO_WRITE_PIN (DIO_PORTS port, DIO_PINS pin, PIN_STATE state)
{
	STD_return ret_val=ok;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	08 95       	ret
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	08 95       	ret
		{
			CLEAR_BIT(PORTA,pin);
		}
		else
		{
			ret_val=not_ok;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	08 95       	ret
		{
			CLEAR_BIT(PORTB,pin);
		}
		else
		{
			ret_val=not_ok;
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	08 95       	ret
		{
			CLEAR_BIT(PORTC,pin);
		}
		else
		{
			ret_val=not_ok;
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	08 95       	ret
		{
			CLEAR_BIT(PORTD,pin);
		}
		else
		{
			ret_val=not_ok;
 50c:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
	}
	return ret_val;
}
 50e:	08 95       	ret

00000510 <DIO_READ_PIN>:
STD_return DIO_READ_PIN (DIO_PORTS port, DIO_PINS pin, uint8_t* value)
{
	STD_return ret_val=ok;
	switch(port)
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	f1 f0       	breq	.+60     	; 0x550 <DIO_READ_PIN+0x40>
 514:	30 f0       	brcs	.+12     	; 0x522 <DIO_READ_PIN+0x12>
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	91 f1       	breq	.+100    	; 0x57e <DIO_READ_PIN+0x6e>
 51a:	83 30       	cpi	r24, 0x03	; 3
 51c:	09 f4       	brne	.+2      	; 0x520 <DIO_READ_PIN+0x10>
 51e:	46 c0       	rjmp	.+140    	; 0x5ac <DIO_READ_PIN+0x9c>
 520:	5c c0       	rjmp	.+184    	; 0x5da <DIO_READ_PIN+0xca>
	{
		case porta: *value=READ_BIT(PINA,pin);break;
 522:	79 b3       	in	r23, 0x19	; 25
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	9c 01       	movw	r18, r24
 52a:	06 2e       	mov	r0, r22
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_READ_PIN+0x22>
 52e:	22 0f       	add	r18, r18
 530:	33 1f       	adc	r19, r19
 532:	0a 94       	dec	r0
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_READ_PIN+0x1e>
 536:	87 2f       	mov	r24, r23
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	82 23       	and	r24, r18
 53c:	93 23       	and	r25, r19
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_READ_PIN+0x34>
 540:	95 95       	asr	r25
 542:	87 95       	ror	r24
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_READ_PIN+0x30>
 548:	fa 01       	movw	r30, r20
 54a:	80 83       	st	Z, r24
	}
	return ret_val;
}
STD_return DIO_READ_PIN (DIO_PORTS port, DIO_PINS pin, uint8_t* value)
{
	STD_return ret_val=ok;
 54c:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		case porta: *value=READ_BIT(PINA,pin);break;
 54e:	08 95       	ret
		case portb: *value=READ_BIT(PINB,pin);break;
 550:	76 b3       	in	r23, 0x16	; 22
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	9c 01       	movw	r18, r24
 558:	06 2e       	mov	r0, r22
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_READ_PIN+0x50>
 55c:	22 0f       	add	r18, r18
 55e:	33 1f       	adc	r19, r19
 560:	0a 94       	dec	r0
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_READ_PIN+0x4c>
 564:	87 2f       	mov	r24, r23
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	82 23       	and	r24, r18
 56a:	93 23       	and	r25, r19
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_READ_PIN+0x62>
 56e:	95 95       	asr	r25
 570:	87 95       	ror	r24
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_READ_PIN+0x5e>
 576:	fa 01       	movw	r30, r20
 578:	80 83       	st	Z, r24
	}
	return ret_val;
}
STD_return DIO_READ_PIN (DIO_PORTS port, DIO_PINS pin, uint8_t* value)
{
	STD_return ret_val=ok;
 57a:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		case porta: *value=READ_BIT(PINA,pin);break;
		case portb: *value=READ_BIT(PINB,pin);break;
 57c:	08 95       	ret
		case portc: *value=READ_BIT(PINC,pin);break;
 57e:	73 b3       	in	r23, 0x13	; 19
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	9c 01       	movw	r18, r24
 586:	06 2e       	mov	r0, r22
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_READ_PIN+0x7e>
 58a:	22 0f       	add	r18, r18
 58c:	33 1f       	adc	r19, r19
 58e:	0a 94       	dec	r0
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_READ_PIN+0x7a>
 592:	87 2f       	mov	r24, r23
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	82 23       	and	r24, r18
 598:	93 23       	and	r25, r19
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_READ_PIN+0x90>
 59c:	95 95       	asr	r25
 59e:	87 95       	ror	r24
 5a0:	6a 95       	dec	r22
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_READ_PIN+0x8c>
 5a4:	fa 01       	movw	r30, r20
 5a6:	80 83       	st	Z, r24
	}
	return ret_val;
}
STD_return DIO_READ_PIN (DIO_PORTS port, DIO_PINS pin, uint8_t* value)
{
	STD_return ret_val=ok;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		case porta: *value=READ_BIT(PINA,pin);break;
		case portb: *value=READ_BIT(PINB,pin);break;
		case portc: *value=READ_BIT(PINC,pin);break;
 5aa:	08 95       	ret
		case portd: *value=READ_BIT(PIND,pin);break;
 5ac:	70 b3       	in	r23, 0x10	; 16
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	9c 01       	movw	r18, r24
 5b4:	06 2e       	mov	r0, r22
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_READ_PIN+0xac>
 5b8:	22 0f       	add	r18, r18
 5ba:	33 1f       	adc	r19, r19
 5bc:	0a 94       	dec	r0
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_READ_PIN+0xa8>
 5c0:	87 2f       	mov	r24, r23
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	82 23       	and	r24, r18
 5c6:	93 23       	and	r25, r19
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_READ_PIN+0xbe>
 5ca:	95 95       	asr	r25
 5cc:	87 95       	ror	r24
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_READ_PIN+0xba>
 5d2:	fa 01       	movw	r30, r20
 5d4:	80 83       	st	Z, r24
	}
	return ret_val;
}
STD_return DIO_READ_PIN (DIO_PORTS port, DIO_PINS pin, uint8_t* value)
{
	STD_return ret_val=ok;
 5d6:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		case porta: *value=READ_BIT(PINA,pin);break;
		case portb: *value=READ_BIT(PINB,pin);break;
		case portc: *value=READ_BIT(PINC,pin);break;
		case portd: *value=READ_BIT(PIND,pin);break;
 5d8:	08 95       	ret
		default: ret_val=not_ok;
 5da:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret_val;
 5dc:	08 95       	ret

000005de <_exit>:
 5de:	f8 94       	cli

000005e0 <__stop_program>:
 5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <__stop_program>
